(this["webpackJsonpgit-co-commit-docs"]=this["webpackJsonpgit-co-commit-docs"]||[]).push([[3],{57:function(e,a,t){"use strict";t.r(a);var n=t(0),c=t.n(n),r=t(3),m=t(22),o=t.n(m),s=t(19),l=t(7),i=t(1),p=t.n(i),u=function(){return c.a.createElement(c.a.Fragment,null,c.a.createElement(l.a,{prevLink:"/get-started/setup-git-co-commit-for-node-project",nextLink:"/references/dependencies-used"}),c.a.createElement("div",{className:p.a.Content},c.a.createElement("h1",{className:p.a.Title},"Co authered by in git commit"),c.a.createElement("p",{className:p.a.Para},"You can create a commit with more than one author by adding one or more Co-authored-by trailers to the commit's message. Co-authored commits are visible on GitHub and can be included in the profile contributions graph and the repository's statistics."),c.a.createElement("h3",{className:p.a.SubTitle},"Creating co-authored commits on the command line"),c.a.createElement("p",{className:p.a.Para},"1. Collect the name and email address for each co-author."),c.a.createElement("p",{className:p.a.Para},"2. Type your commit message and a short, meaningful description of your changes. After your commit description, instead of a closing quotation, add two empty lines."),c.a.createElement("code",{className:p.a.Code},'git commit -m "Refactor usability tests ',c.a.createElement("br",null),">",c.a.createElement("br",null),">",c.a.createElement("br",null)),c.a.createElement("p",{className:p.a.Para},"3. On the next line of the commit message, type ",c.a.createElement("span",{className:p.a.SpecialText},"Co-authored-by: name <name@example.com>")," with specific information for each co-author. After the co-author information, add a closing quotation mark. If you're adding multiple co-authors, give each co-author their own line and ",c.a.createElement("span",{className:p.a.SpecialText},"Co-authored-by:")," commit trailer."),c.a.createElement("code",{className:p.a.Code},'git commit -m "Refactor usability tests ',c.a.createElement("br",null),">",c.a.createElement("br",null),">",c.a.createElement("br",null),"Co-authored-by: name ","<name@example.com>",c.a.createElement("br",null),"Co-authored-by: another-name ","<another-name@example.com>",'"')),c.a.createElement(l.a,{prevLink:"/get-started/setup-git-co-commit-for-node-project",nextLink:"/references/dependencies-used"}))},d=function(){return c.a.createElement(c.a.Fragment,null,c.a.createElement(l.a,{prevLink:"/references/co-authered-by-in-git-commit",nextLink:"/references/concept-of-git-co-commit"}),c.a.createElement("div",{className:p.a.Content},c.a.createElement("h1",{className:p.a.Title},"Dependencies used"),c.a.createElement("p",{className:p.a.Para},"Git co commit need two npm package and one external npm package which are,"),c.a.createElement("p",{className:p.a.List},"1. child_process"),c.a.createElement("p",{className:p.a.List},"2. os"),c.a.createElement("p",{className:p.a.List},"3. prompt-sync"),c.a.createElement("p",{className:p.a.Para},c.a.createElement("b",null,"child_process:")," Used to execute the command on different terminals by using JavaScript programming. "),c.a.createElement("p",{className:p.a.Para},c.a.createElement("b",null,"os:")," Used to fetch the operating system the program is running."),c.a.createElement("p",{className:p.a.Para},c.a.createElement("b",null,"prompt-sync:"),"  Used to get the input from the user. It is the external npm package we need to install separately. ")),c.a.createElement(l.a,{prevLink:"/references/co-authered-by-in-git-commit",nextLink:"/references/concept-of-git-co-commit"}))},h=function(){return c.a.createElement(c.a.Fragment,null,c.a.createElement(l.a,{prevLink:"/references/dependencies-used"}),c.a.createElement("div",{className:p.a.Content},c.a.createElement("h1",{className:p.a.Title},"Concept of git co commit"),c.a.createElement("p",{className:p.a.Para},"1. Commit message and co-authors username are getting from the user by using the ",c.a.createElement("b",null,"prompt-sync")," package. If more than one co-authors, the username must be separated by comma."),c.a.createElement("p",{className:p.a.Para},"2. After fetching input from the user, emailId of co-authors are generated ",c.a.createElement("span",{className:p.a.SpecialText},"(username.users.noreply@github.com)"),"."),c.a.createElement("p",{className:p.a.Para},"3. By using the ",c.a.createElement("b",null,"os")," package,  the type of operating system the program is running is fetched."),c.a.createElement("p",{className:p.a.Para},"4. Depends upon the operating system, the below git commit command is generated."),c.a.createElement("code",{className:p.a.Code},'git commit -m "Refactor usability tests ',c.a.createElement("br",null),">",c.a.createElement("br",null),">",c.a.createElement("br",null),"Co-authored-by: name ","<name@example.com>",c.a.createElement("br",null),"Co-authored-by: another-name ","<another-name@example.com>",'"'),c.a.createElement("p",{className:p.a.Para},"5. By using the ",c.a.createElement("b",null,"child_process")," package, the command is running in the bash or PowerShell based on the operating system.")),c.a.createElement(l.a,{prevLink:"/references/dependencies-used"}))};a.default=function(){return c.a.createElement("div",{className:o.a.Docs},c.a.createElement("div",{className:o.a.Sidebar},c.a.createElement(s.a,null)),c.a.createElement("div",{className:o.a.Content},c.a.createElement(r.c,null,c.a.createElement(r.a,{exact:!0,path:"/references/co-authered-by-in-git-commit",component:u}),c.a.createElement(r.a,{exact:!0,path:"/references/dependencies-used",component:d}),c.a.createElement(r.a,{exact:!0,path:"/references/concept-of-git-co-commit",component:h}),c.a.createElement(r.a,{path:"/references",component:u}))))}}}]);
//# sourceMappingURL=3.711ffe10.chunk.js.map